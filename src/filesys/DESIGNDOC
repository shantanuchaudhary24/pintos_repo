       	 +-------------------------+
		     |		      CSL373	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Shantanu Chaudhary 
Harshal Bidasaria

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define CACHE_SIZE 	 64
defines the max size of beffer cache array

#define BUFFER_VALID 0x1
#define BUFFER_DIRTY 0x2
Valid and Dirty bits to mark the buffer

#define MARK_EMPTY -1
To ininitialise the integer to -1

#define WRITE_BACK_INTERVAL TIMER_FREQ*20
Interval after which periodic flushing takes place

typedef struct buf
{
	int flag;
	int accessed;
	block_sector_t sector;
	void *data;
}struct_buf;

Defines the structure of an entry in the array.
The entry contains a flag to tell the status of the entry
The accessed field tells the number of accesses to the entry
The sector field stores the corresponding sector to which
cache entry is stored.The data field stores the data read
from the disk or to be written to the disk.

struct_buf bcache[CACHE_SIZE];
Array which is used to represent the buffer cache

struct lock bcache_lock;
Lock for atomic insertion and deletion of cache entries.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.
The cache eviction takes place through a clock algorithm plus clever
use of number of accesses to the cache entry.The clock hand moves in
a circular fashion to check if the accessed field of an entry is 0 or 
less than 0.If it is greater than zero it decrements the accessed field
and moves to the next entry and continues in this fashion. If it doesn't
find any entry to evict and reaches the point where it started from then
it evicts that entry i.e. writes it to disk an returns the empty cache entry
in the buffer cache array.

>> C3: Describe your implementation of write-behind.
Write behind has been implemented by spawning a thread after the buffer
cache is initialised.This thread calls a function that consists of calls
which sleeps the thread for 20 seconds and then it calls flush_cache
which writes the entries marked dirty to the disk. 

>> C4: Describe your implementation of read-ahead.
We spawn a thread which checks a list of sectors to be inserted into the cache
If it finds the list non-empty, it reads the sectors into the cache else it sleeps
The corresponding wakeup is done when the sectors are added to the list of read_ahead_sectors

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
